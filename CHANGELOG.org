* Version 0.0.3
** Breaking changes
+ made ~Requester~ instance ~requester~ the default export
+ remove ~Requester.httpGet~

** New features
+ Added ~Requester.setOptions~ to set options for ~Requester~ class
+ Added option ~throwOnFailure~ to ~Requester~ class. If true, throws
  the error received when a request fails. Default value is false.
+ Added ~UnbalancedParametersError~, thrown when an invalid parameter
  list is passed to a request.
+ All ~Requester~ request methods can now take a list of request
  parameters rather than hand coding them into the URL
+ Add ~delete~, ~patch~, ~post~, and ~push~ methods to ~Requester~.

** Internal changes
+ Moved request logic into general method ~Requester._request~ that
  can handle any request method.

** Future plans
+ Give user the option of setting a timeout

* Version 0.0.2
Small update to remove documentation from the npm package and fix the
example README.md

* Version 0.0.1
0.0.1 should be ready for use in projects requiring only HTTP GET requests.

** Deprecated features
+ ~Requester.httpGet()~ is deprecated and will be removed in =1.0.0=.
  Replaced with ~Requester.get()~.

** New features
+ New module =errors.js= to hold error classes.
+ New ~Error~ class ~IDInUseError~
+ New ~Error~ class ~InvalidRequestError~
+ New ~Error~ class ~RequestNotCompleteError~
+ New function ~Requester.error()~ to retrieve errors from failed requests.
+ New function ~Requester.createUniqueID()~ to create guaranteed
  unique IDs to assign to requests.

** Internal changes
+ Extracted ~Requester.error()~ and ~Requester.response()~ error
  checking code into single helper function
  ~Requester._responseErrorChecker()~.


** Future plans
+ Implement a general request function that can handle any HTTP
  request type, then implement functions for each request type that
  use the general request function.
+ Give user the option of having errors thrown instead of cached
+ Give user the option of setting a timeout


* Version 0.0.0
Initial release
